import os,copy
from datetime import datetime

# Set current working directory with respect to what is defined in config file
if not os.path.exists(config["workdir"]):
	raise Exception("Path to working directory not found!!! Please see config file.")
workdir:config["workdir"]

time_start = datetime.now()

# Determining the output files to be created based on the user input 
def allInputFunction(wildcards):
	output = []

	if (config["Assembly"]):
		output += expand("{sample}/01_data/{sample}_1.trimmed.fastq.gz",sample=config["samples"])
		output += expand("{sample}/01_data/{sample}_2.trimmed.fastq.gz",sample=config["samples"])
		output += expand("{sample}/02_assembly/{sample}.assembled.fasta", sample=config["samples"])

	if (config["Standardization"]):
		output += expand("{sample}/03_annotation/{sample}.standardized.filt.gb", sample=config["samples"])
	else:
		output += expand("{sample}/03_annotation/{sample}.annotated.filt.gb",sample=config["samples"])
					
	if (config['Backmapping']):
		output += expand("{sample}/04_backmapping/{sample}.backmapping.visualization.html", sample=config["samples"])

	if (config['Metadata']):
		for sample in config['samples']:
			if (config['samples_metadata'] == None):
				print("No metadata files provided. Running the pipeline without metadata file. If providing metadata file later, then rerun the pipeline with the metadata file.")
			else:
				if sample in config["samples_metadata"]:
					if (not os.path.exists(config["samples_metadata"][sample])):
						print("Metadata file %s not found." %config["samples_metadata"][sample])

					output += ["%s/05_metadata/%s.final.gb" %(sample,sample)]
	
	return output

rule all:
	input:
		allInputFunction		



# Import rules 
include: "rules/01_Processing.smk"
include: "rules/02_Assembly.smk"
include: "rules/03_Annotation.smk"
include: "rules/04_Backmapping.smk"
include: "rules/05_Metadata.smk"
localrules: GeSeqAutomation_AnnotationPreStandardization, GeSeqAutomation_AnnotationPostStandardization
